const ebc = {
  // Uppercase Letters
  A: "00111100 01000010 10000001 10000001 11111111 10000001 10000001 10000001",
  B: "11111110 10000001 10000001 11111110 10000001 10000001 10000001 11111110",
  C: "01111110 10000001 10000000 10000000 10000000 10000000 10000001 01111110",
  D: "11111110 10000001 10000001 10000001 10000001 10000001 10000001 11111110",
  E: "11111111 10000000 10000000 11111110 10000000 10000000 10000000 11111110",
  F: "11111111 10000000 10000000 11111110 10000000 10000000 10000000 10000000",
  G: "01111110 10000001 10000000 10000000 10011110 10000001 10000001 01111110",
  H: "10000001 10000001 10000001 11111111 10000001 10000001 10000001 10000001",
  I: "01111110 00100010 00100010 00100010 00100010 00100010 01111110 00000000",
  J: "00111100 00010000 00010000 00010000 10010000 10010000 01100000 00000000",
  K: "10000001 10000010 10000100 10001000 10010000 10100000 11000000 10000000",
  L: "10000000 10000000 10000000 10000000 10000000 10000000 11111111 00000000",
  M: "10000001 11000011 10100101 10011001 10000001 10000001 10000001 10000001",
  N: "10000001 10010001 10100001 11000001 10000001 10000001 10000001 10000001",
  O: "01111100 10000010 10000001 10000001 10000001 10000010 10000001 01111110",
  P: "11111110 10000001 10000001 11111110 10000001 10000001 10000001 10000001",
  Q: "01111100 10000010 10000001 10000001 10010001 10001010 10000101 01111010",
  R: "11111110 10000001 10000001 11111110 10010001 10001001 10000101 10000001",
  S: "10000001 10000001 10000001 10000001 10000001 10000001 11111111 10000001",
  T: "01111110 00100010 00100010 00100010 00100010 00100010 01111110 00000000",
  U: "10000001 10000001 10000001 10000001 01000010 01000100 00111000 00000000",
  V: "11111111 00000100 00001000 00010000 00100000 01000000 11111111 00000000",
  W: "01111110 10000001 10000001 01111110 10000001 10000001 10000001 01111110",
  X: "10000001 01000010 00100100 00011000 00100100 01000010 10000001 00000000",
  Y: "11111110 10000001 10000001 11111110 00010000 00001000 00000100 00000000",
  Z: "11111111 00000001 00000010 00000100 00001000 00010000 00100000 11111111",

  // Lowercase Letters
  a: "00000000 00000000 01111000 10000010 01111110 10000010 10000010 01111111",
  b: "10000001 10000001 10111111 11000001 10000001 10000001 10000001 10111110",
  c: "00000000 00000000 01111110 10000000 10000000 10000000 10000000 01111110",
  d: "00000010 00000010 01111101 10000011 10000010 10000010 10000010 01111111",
  e: "00000000 00000000 01111100 10000010 11111111 10000000 10000000 01111110",
  f: "00011100 00100010 00100000 00111110 00100000 00100000 00100000 00100000",
  g: "00000000 01111111 10000010 10000010 01111110 00000010 10000010 01111100",
  h: "10000001 10000001 10111111 11000001 10000001 10000001 10000001 10000001",
  i: "00100000 00000000 00100000 00100000 00100000 00100000 00100000 00100000",
  j: "00010000 00000000 00010000 00010000 00010000 00010000 10010000 01100000",
  k: "10000001 10000010 10100000 11000000 10100000 10010000 10001000 10000001",
  l: "00100000 00100000 00100000 00100000 00100000 00100000 00100000 00100000",
  m: "00000000 00000000 10011010 10100101 10100101 10000001 10000001 10000001",
  n: "00000000 00000000 10111110 11000001 10000001 10000001 10000001 10000001",
  o: "00000000 00000000 01111100 10000010 10000010 10000010 10000010 01111110",
  p: "00000000 10111110 11000001 10000001 10000001 11000001 10111110 10000001",
  q: "00000000 01111101 10000010 10000010 10000010 01111101 00000010 00000011",
  r: "00000000 00000000 10111110 11000001 10000000 10000000 10000000 10000000",
  s: "00000000 00000000 01111110 10000000 01111100 00000010 10000010 01111100",
  t: "00100000 00100000 00111110 00100000 00100000 00100010 00100100 00011000",
  u: "00000000 00000000 10000010 10000010 10000010 10000010 10000010 01111111",
  v: "00000000 00000000 10000010 10000010 01000100 01000100 00101000 00010000",
  w: "00000000 00000000 10000001 10000001 10100101 10100101 01011010 00000000",
  x: "00000000 00000000 10000010 01000100 00101000 01000100 10000010 00000000",
  y: "00000000 00000000 10000010 10000010 01111110 00000010 10000010 01111100",
  z: "00000000 00000000 01111110 00000100 00001000 00010000 00100000 01111110",

  // Other Characters
  "?": "01111110 10000001 00000001 00000110 00001000 00000000 00001000 00000000",
  "@": "00111110 01000001 10011010 10100100 10100100 10011010 01000001 00111110",
  "!": "00100000 00100000 00100000 00100000 00100000 00100000 00100000 00100000",
  $: "00100000 00111000 01000100 01000100 01111100 00010010 00010010 01111000",
  "%": "11000000 11000100 00001000 00010000 00100000 01000011 10000110 00000011",
  "&": "00110000 01001000 01010000 00110000 01010101 01001001 00100010 00011100",
  "*": "00100000 01001000 00111110 00101000 01111110 01001000 00100000 00100000",
  "+": "00100000 00100000 00010000 00010000 01111110 00010000 00010000 00100000",
  ",": "00000000 00000000 00000000 00000000 00000000 00000000 00110000 00100000",
  "-": "00000000 00000000 00000000 00000000 01111110 00000000 00000000 00000000",
  ".": "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000",
  "/": "00000000 00000010 00000100 00001000 00010000 00100000 01000000 10000000",
  // stay
  "#": "11010010 11011110 11011111 11100000 11100001 11100010 11100011 11100100",

  // Digits
  0: "00111100 01000010 10000001 10000001 10000001 10000001 01000010 00111100",
  1: "00011000 00101000 00111000 00101000 00101000 00101000 00101000 01111110",
  2: "01111110 10000001 00000001 00000110 00011000 00100000 01000000 11111111",
  3: "01111110 10000001 00000001 00011110 00000001 00000001 10000001 01111110",
  4: "00000100 00001100 00010100 00100100 01000100 11111111 00000100 00000100",
  5: "11111111 10000000 10000000 11111110 00000001 00000001 10000001 01111110",
  6: "00011110 00100000 01000000 11111110 10000001 10000001 10000001 01111110",
  7: "11111111 00000001 00000010 00000100 00001000 00010000 00100000 01000000",
  8: "01111110 10000001 10000001 01111110 10000001 10000001 10000001 01111110",
  9: "01111110 10000001 10000001 01111111 00000001 00000001 10000001 01111110",
};

let sent = " This is my hotel stay as a 8 byte character # # # #";
console.log(sent.length);
let scroll = 0;
//let sentind=0
let sz = 100;
let cnv;
let z, o;
function preload() {
  z = loadImage("z.jpg");
  o = loadImage("o.jpg");
}
function setup() {
  cnv = createCanvas(800, 800);
  let cx = windowWidth / 2 - cnv.width / 2;
  let cy = windowHeight / 2 - cnv.height / 2;
  cnv.position(cx, cy);
  print(ebc["1"]);
  frameRate(3);
  print(sent, sent.length);
  strokeWeight(3);
  z.resize(100, 0);
  o.resize(100, 0);
  imageMode(CENTER);
  angleMode(DEGREES);
}

function draw() {
  background(220);
  //translate(width/2,height/2)
  drawCharacter(0, 0, ebc["#"]);
}

function drawCharacter(x, y, lc) {
  let letind = 0;
  mystr = lc;
  cstr = mystr.replaceAll(" ", "");
  let strind = 0;

  for (let j = 0; j < 8; j++) {
    for (let i = 0; i < 8; i++) {
      let state;
      if (cstr.charAt(strind) === "0") {
        fill(255);
        state = o;
        stroke(127);
      } else {
        state = z;
        fill(0);
        stroke(127);
      }
      //rect((x*88) + i*sz,(y*88) + j*sz,sz,sz);
      push();
      translate(x * 80 + i * sz + sz / 2, y * 80 + j * sz + sz / 2);
      rotate(random([90, 0, 180]));
      image(state, 0, 0, sz, sz);
      pop();
      strind++;
    }
    //fill(255,0,0)
    //rect((x*88) + 8*sz,(y*88) + j*sz,sz,sz);
  }

  letind++;
}
